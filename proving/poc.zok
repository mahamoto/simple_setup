

import "hashes/sha256/512bitPadded.zok" as sha256;
import "hashes/sha256/512bitPacked" as sha256packed;

from "ecc/babyjubjubParams" import BabyJubJubParams;
import "signatures/verifyEddsa.zok" as verifyEddsa;
import "ecc/babyjubjubParams.zok" as context;
import "utils/casts/u32_to_field" as u32_from_bits;
import "utils/casts/field_to_u32" as field_to_u32;
import "utils/casts/u32_to_field" as u32_to_field;

const u32 LENGTH = 1;


/*
DATA TYPES (STRUCTS)
*/

struct SignedValue {
    field[2] R;
    field S;
}

struct PKey {
    field[2] value;
}

struct RawCarbonFootprint {
    u32[16] value;
    u32[16] materialId;
}

struct RawRecipe{
    u32[16] weights;
    u32[16] materialIds;
}
struct Supplier {
    u32[16] materialId;
    u32[16] supplierID;
}


struct VerifiedTag{
    u32 materialId;
    field verifiedTag;
}


/*
Generals
*/

// def testHasher(Supplier suppliers,PKey auditorsSuppliers) -> field[2]{
//       field[2] h = sha256packed([0,auditorsSuppliers.value[0], auditorsSuppliers.value[1], u32_to_field(suppliers.supplierID[15])]);
//       return h;
// }

// def hashSupplierAndAuditors(Supplier suppliers,PKey auditorsSuppliers) -> u32[16]{
//     u32[16] extendedKey = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,field_to_u32(auditorsSuppliers.value[0]),field_to_u32(auditorsSuppliers.value[1])];
//     u32[8] hashSuppliers = sha256(suppliers.supplierID[0..8], suppliers.supplierID[8..16]);
//     u32[8] hashAuditors = sha256(extendedKey[0..8], extendedKey[8..16]);
//     return [...hashSuppliers, ...hashAuditors];
// }
def calculateOutput<K, N>(
    RawRecipe[K] recipes,
    RawCarbonFootprint[N] carbonFootprints
    ) -> u32 {

        u32[K*16] mut weights = [0;K*16];

        for u32 i in 0..K*16 {
            weights[i] = recipes[i/16].weights[i%16];
        }

        u32 mut result = 0;

        for u32 i in 0..N {
            log("{} + {} * {}", u32_from_bits(result), u32_from_bits(weights[i]), u32_from_bits(carbonFootprints[i].value[15]));
            result = result + weights[i] * carbonFootprints[i].value[15];
        }
        return result;
    }

def checkMaterialIds<K, N>(
    RawRecipe[K] recipes,
    RawCarbonFootprint[N] carbonFootprints
    ) -> bool {
        
        u32[K*16] mut recipeIds = [0;K*16];

        for u32 i in 0..K*16 {
            recipeIds[i] = recipes[i/16].materialIds[i%16];
        }

        bool mut result = true;
        for u32 i in 0..N {

            result = result == (recipeIds[i] == carbonFootprints[i].materialId[15]);
        }

        return result;

    }

/*
ProductCarbonFootprints
*/

def hashCarbonFootprint(RawCarbonFootprint rawValue) -> u32[16] {
    u32[8] hashCFValues = sha256(rawValue.value[0..8], rawValue.value[8..16]);
    u32[8] hashMaterialIds = sha256(rawValue.materialId[0..8], rawValue.materialId[8..16]);
    return [...hashCFValues, ...hashMaterialIds];
}

def hashAllCarbonFootprints<N>(
    RawCarbonFootprint[N] rawInputs
    ) -> u32[N][16] {
        u32[N][16] mut result = [[0; 16]; N];
        for u32 i in 0..N {
            result[i] = hashCarbonFootprint(rawInputs[i]);
        }
        return result;
    }

def checkSignature(BabyJubJubParams context, SignedValue sig, u32[16] hash, PKey key) -> bool {

    return verifyEddsa(sig.R, sig.S, key.value, hash[0..8], hash[8..16], context);

}

def checkAllSignatureCarbonFootprints<N>(
    BabyJubJubParams context,
    SignedValue[N] signedCarbonFootprints,
    u32[N][16] hashedCarbonFootprints,
    PKey[N] auditors,
    VerifiedTag[N] verifiedTags,
    RawCarbonFootprint[N] rawCarbonFootprints
    ) -> u32 {
        u32 mut percentage = 0;
        u32 percentage_steps = 100/N;
        bool mut isSignedCorrect = false;
        for u32 i in 0..N {

            for u32 y in 0..N {
            
            bool materialIdMatchedAndToBeVerified = (
                rawCarbonFootprints[i].materialId[15] == verifiedTags[y].materialId 
                && verifiedTags[y].verifiedTag == 1 ? true : false
                );


            isSignedCorrect = if materialIdMatchedAndToBeVerified == true {
                checkSignature(context, signedCarbonFootprints[i], hashedCarbonFootprints[i], auditors[i])
                } else{false};

            percentage = if materialIdMatchedAndToBeVerified == true && isSignedCorrect == true {
                percentage + percentage_steps
                } else {percentage};

            }
        }
        
        log("Footprint certified by: {}%",u32_from_bits(percentage));


        return percentage;
    }


def validateCarbonFootprints<N>(
    BabyJubJubParams context,
    RawCarbonFootprint[N] rawValues,
    SignedValue[N] signedValues,
    PKey[N] publicKeys,
    VerifiedTag[N] verifiedTags
    ) -> u32 {
    
    u32[N][16] hashedCarbonFootprints = hashAllCarbonFootprints(rawValues);
    
    //check validity of signatures
    u32 verifiedSignatures = checkAllSignatureCarbonFootprints(
        context, 
        signedValues, 
        hashedCarbonFootprints, 
        publicKeys,
        verifiedTags,
        rawValues
        );

    return verifiedSignatures;
    }



/*
Recipe
*/

def hashRecipe(RawRecipe rawValue) -> u32[16] {
    return [
        ...sha256(rawValue.weights[0..8], rawValue.weights[8..16]), 
        ...sha256(rawValue.materialIds[0..8], rawValue.materialIds[8..16])
    ];
}

def validateRecipe(
    BabyJubJubParams context,
    RawRecipe rawRecipe,
    SignedValue signedRecipe,
    PKey auditor
    ) -> bool {

        u32[16] hashedRecipe = hashRecipe(rawRecipe);
        bool verifiedSignature = checkSignature(context, signedRecipe, hashedRecipe, auditor);

        return verifiedSignature;
    }

def validateRecipes<N>(
    BabyJubJubParams context,
    RawRecipe[N] rawRecipes,
    SignedValue[N] signedRecipes,
    PKey[N] auditors
    ) -> bool {
        bool mut result = true;
        for u32 i in 0..N {

            result = result == validateRecipe(context, rawRecipes[i], signedRecipes[i], auditors[i]);
        }

        return result;
    }


/*
Suppliers
*/


def generateSupplierCommitments<N>(
    Supplier[N] suppliers,
    PKey[N] auditorsSuppliers
    ) -> field[2] {
        u32 mut toHash=0;
        for u32 i in 0..N {
            toHash = toHash + suppliers[i].supplierID[15] + field_to_u32(auditorsSuppliers[i].value[0])+ field_to_u32(auditorsSuppliers[i].value[1]);
        }
        field[2] result = sha256packed([0, 0, 0, u32_to_field(toHash)]);
        log("toHash: {}", u32_from_bits(toHash));
        return result;
    }



def hashSupplier(Supplier rawSupplier) -> u32[16] {
        u32[8] hashMaterialId = sha256(rawSupplier.materialId[0..8], rawSupplier.materialId[8..16]);
        u32[8] hashSupplierId = sha256(rawSupplier.supplierID[0..8], rawSupplier.supplierID[8..16]);
       return [...hashMaterialId, ...hashSupplierId];

}


def hashAllSuppliers<N>(
    Supplier[N] rawInputs
    ) -> u32[N][16] {
        u32[N][16] mut result = [[0; 16]; N];
        for u32 i in 0..N {
            result[i] = hashSupplier(rawInputs[i]);
        }
        return result;
    }


def checkAllSignatureSuppliers<N>(
    BabyJubJubParams context,
    SignedValue[N] signedCarbonFootprints,
    u32[N][16] hashedCarbonFootprints,
    PKey[N] auditors
    ) -> bool {

        bool mut result = true;
        
        for u32 i in 0..N {
            bool isSignedCorrect = checkSignature(context, signedCarbonFootprints[i], hashedCarbonFootprints[i], auditors[i]) ? true : false;
            log("{} valid signature: {}", u32_from_bits(i), isSignedCorrect);
            result = result == isSignedCorrect;
        }

        return result;
    }


def checkMaterialIDSuppliers<N>(RawCarbonFootprint[N] rawValues, Supplier[N] suppliers) -> bool {
    bool mut result = true;
    // iterate through each RawCarbonFootprint
    for u32 i in 0..N {
        // default to mismatch
        bool mut match = false;
        // compare current RawCarbonFootprint with each Supplier
        for u32 j in 0..N {
            // set match to true if anything matches
            match = match || (rawValues[i].materialId[15] == suppliers[j].materialId[15]);
            
        }
        // if no match was found for a RawCarbonFootprint record that in result
        result = result && match;
    }
    // return the result of all operations
    return result;
}

def validateSuppliers<N>(
    BabyJubJubParams context,
    RawCarbonFootprint[N] rawValues,
    Supplier[N] suppliers,
    SignedValue[N] signedSuppliers,
    PKey[N] publicKeys
) -> bool {
    
    bool checkedMaterialIDSuppliers = checkMaterialIDSuppliers(rawValues,suppliers);

    // assert that all suppliers have been checked and are correct
    assert(checkedMaterialIDSuppliers);

    u32[N][16] hashedSuppliers = hashAllSuppliers(suppliers);
    
    // check validity of signatures
    bool verifiedSignatures = checkAllSignatureSuppliers(
        context, 
        signedSuppliers, 
        hashedSuppliers, 
        publicKeys
    );

    return checkedMaterialIDSuppliers && verifiedSignatures;
}


def createAuditorsOutput<N>(PKey[N]auditorsCarbonFootprints) -> field[N][2] {
    field[2] null = [0,0];
    field[N][2] mut result = [null; N];
    for u32 x in 0..N {
        result[x] = [auditorsCarbonFootprints[x].value[0],auditorsCarbonFootprints[x].value[1]];
    }
    for u32 i in 0..N {
        for u32 j in (i+1)..N {
            result[j] = if result[i] == result[j] {null} else {result[j]};
        }
    }
    return result;
}

def generateSupplierCommitments<N>(
    Supplier[N] suppliers
    ) -> field[2] {
        field mut toHash=0;
    
        for u32 i in 0..N {
            log("strings to hash {}", suppliers[i].supplierID[15]);
            toHash = toHash + u32_to_field(suppliers[i].supplierID[15]);
            log("toHash{}: {}", i, (toHash));
        }
        field[2] result = sha256packed([0, 0, 0, (toHash)]);
        log("toHash: {}", (toHash));
        return result;
    }


/*
main
*/

def main(
    private RawRecipe[1] rawRecipes,
    private SignedValue[1] signedRecipes,
    PKey[1] auditorsRecipe,
    private RawCarbonFootprint[LENGTH] rawCarbonFootprints, 
    private SignedValue[LENGTH] signedCarbonFootprints, 
    private PKey[LENGTH] auditorsCarbonFootprints,
    private Supplier[LENGTH] suppliers,
    private SignedValue[LENGTH] signedSuppliersList, 
    private PKey[LENGTH] auditorsSupplierIdentity,
    private VerifiedTag[LENGTH] verifiedTags
    ) -> (u32, u32, field [2], field[LENGTH][2]) { 

    //Create context for signature verifications
	BabyJubJubParams context = context();



    // log("Validating Recipe", 0);
    bool validRecipe = validateRecipes(context, rawRecipes, signedRecipes, auditorsRecipe);
    assert(validRecipe);
    log("Validation of recipe complete: {}", validRecipe);
    
    //check validty of carbon footprints
    // log("Validating Signatures of Carbon Footprint values", 0);
    u32 certifiedPCFs = validateCarbonFootprints(context, rawCarbonFootprints, signedCarbonFootprints, auditorsCarbonFootprints,verifiedTags);
    log("Validation of CF signatures complete: certified percentage is  {}", u32_from_bits(certifiedPCFs));
    
    // Check if the suppliers match suppliers in Footprints values
    bool validSuppliers = validateSuppliers(context, rawCarbonFootprints, suppliers, signedSuppliersList, auditorsSupplierIdentity);
    assert(validSuppliers);
    log("Validation of supplier signatures complete: {}", validSuppliers);
    
    
    // Check if the suppliers match suppliers in Footprints values
    field [LENGTH][2] pcfInputsAuditorsSet = createAuditorsOutput(auditorsCarbonFootprints);
    
    // Check if the materialIds of the recipe match the materialIds of the Carbon Footprints
    bool validMaterialIds = checkMaterialIds(rawRecipes, rawCarbonFootprints);
    assert(validMaterialIds);
    log("Check of Material IDs complete: {}", validMaterialIds);

    // Calculate the resulting PCF value
    u32 calculationResult = calculateOutput(rawRecipes, rawCarbonFootprints);
    log("Result of carbon calculation: {}", u32_from_bits(calculationResult));

    field [2] supplierCommitments = generateSupplierCommitments(suppliers);
    log("Result of supplier Commitments1: {}", supplierCommitments[0]);
    log("Result of supplier Commitments2: {}", supplierCommitments[1]);

   
    return (calculationResult,certifiedPCFs,supplierCommitments, pcfInputsAuditorsSet);
}